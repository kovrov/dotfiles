# my take on git prompt
#if [ -f ~/_config/_git_ps1 ]; then
#    . ~/_config/_git_ps1
#fi

# __gitdir accepts 0 or 1 arguments (i.e., location)
# returns location of .git repo
__gitdir ()
{
    if [ -z "${1-}" ]; then
        if [ -n "${__git_dir-}" ]; then
            echo "$__git_dir"
        elif [ -n "${GIT_DIR-}" ]; then
            test -d "${GIT_DIR-}" || return 1
            echo "$GIT_DIR"
        elif [ -d .git ]; then
            echo .git
        else
            git rev-parse --git-dir 2>/dev/null
        fi
    elif [ -d "$1/.git" ]; then
        echo "$1/.git"
    else
        echo "$1"
    fi
}

function parse_git_dirty
{
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]] && echo "*"
}

function smart_folder_name
{
    local XX=$(__gitdir "$1")
    if [ ".git" == "$XX" ]; then
        basename "$PWD"
    elif [ -n "$XX" ]; then
        basename $(dirname "$XX")
    else
        echo ${PWD/$HOME/"~"}
    fi
}

function smart_branch_name
{
    local XX=$(__gitdir "$1")
    if [ -n "$XX" ]; then
       echo [$(__git_ps1 "%s")$(parse_git_dirty)]
    fi
}

function git_repo_subdir
{
    local XX=$(__gitdir "$1")
    if [ ".git" == "$XX" ]; then
        echo
    elif [ -n "$XX" ]; then
        local PWD=`pwd -P`
        echo ${PWD##$(dirname $XX)}
    fi
}

function set_git_ps1
{
    local GRAY='\[\033[0;37m\]'
    local PURPLE='\[\033[1;35m\]'
    local BROWN='\[\033[0;33m\]'
    local YELLOW='\[\033[1;33m\]'
    local CLEAR='\[\033[0m\]'

    export PS1=$YELLOW'$(smart_folder_name)'$GRAY'$(smart_branch_name)'$BROWN'$(git_repo_subdir)'$PURPLE'$ '$CLEAR
}

set_git_ps1
